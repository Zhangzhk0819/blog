<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Git 使用方法与常用命令]]></title>
      <url>/2017/09/21/commands-of-git/</url>
      <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>克隆项目到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/folder-of-project folder-to-save</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入剖析 fully_connected_feed.py]]></title>
      <url>/2017/09/21/understanding-fully-connected-feed/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fully_connected_feed.py 是 tensorflow 中训练 MINIST 数据集的简单示例，通过对该代码的学习，可以帮助我们更好得理解 python 的语法以及 tensorflow 的工作流程。</p>
<a id="more"></a>
<h2 id="代码详细注释"><a href="#代码详细注释" class="headerlink" title="代码详细注释"></a>代码详细注释</h2><p>由于Python是由社区推动的开源并且免费的开发语言，不受商业公司控制，因此，Python的改进往往比较激进，不兼容的情况时有发生。Python为了确保你能顺利过渡到新版本，特别提供了<strong>future</strong>模块，让你在旧的版本中试验新版本的一些特性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pylint: disable=missing-docstring</span></div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> mnist</div><div class="line"></div><div class="line"><span class="comment"># Basic model parameters as external flags.</span></div><div class="line">FLAGS = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">placeholder_inputs</span><span class="params">(batch_size)</span>:</span></div><div class="line">  images_placeholder = tf.placeholder(tf.float32, shape=(batch_size,</div><div class="line">                                                         mnist.IMAGE_PIXELS))</div><div class="line">  labels_placeholder = tf.placeholder(tf.int32, shape=(batch_size))</div><div class="line">  <span class="keyword">return</span> images_placeholder, labels_placeholder</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_feed_dict</span><span class="params">(data_set, images_pl, labels_pl)</span>:</span></div><div class="line">  images_feed, labels_feed = data_set.next_batch(FLAGS.batch_size,</div><div class="line">                                                 FLAGS.fake_data)</div><div class="line">  feed_dict = &#123;</div><div class="line">      images_pl: images_feed,</div><div class="line">      labels_pl: labels_feed,</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> feed_dict</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_eval</span><span class="params">(sess,</span></span></div><div class="line"><span class="function"><span class="params">            eval_correct,</span></span></div><div class="line"><span class="function"><span class="params">            images_placeholder,</span></span></div><div class="line"><span class="function"><span class="params">            labels_placeholder,</span></span></div><div class="line"><span class="function"><span class="params">            data_set)</span>:</span></div><div class="line">  true_count = <span class="number">0</span>  <span class="comment"># Counts the number of correct predictions.</span></div><div class="line">  steps_per_epoch = data_set.num_examples // FLAGS.batch_size</div><div class="line">  num_examples = steps_per_epoch * FLAGS.batch_size</div><div class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> xrange(steps_per_epoch):</div><div class="line">    feed_dict = fill_feed_dict(data_set,</div><div class="line">                               images_placeholder,</div><div class="line">                               labels_placeholder)</div><div class="line">    true_count += sess.run(eval_correct, feed_dict=feed_dict)</div><div class="line">  precision = float(true_count) / num_examples</div><div class="line">  print(<span class="string">'  Num examples: %d  Num correct: %d  Precision @ 1: %0.04f'</span> %</div><div class="line">        (num_examples, true_count, precision))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_training</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">with</span> tf.Graph().as_default():</div><div class="line">    <span class="comment"># Generate placeholders for the images and labels.</span></div><div class="line">    images_placeholder, labels_placeholder = placeholder_inputs(</div><div class="line">        FLAGS.batch_size)</div><div class="line"></div><div class="line">    <span class="comment"># Build a Graph that computes predictions from the inference model.</span></div><div class="line">    logits = mnist.inference(images_placeholder, FLAGS.hidden1, FLAGS.hidden2)</div><div class="line"></div><div class="line">    <span class="comment"># Add to the Graph the Ops for loss calculation.</span></div><div class="line">    loss = mnist.loss(logits, labels_placeholder)</div><div class="line"></div><div class="line">    <span class="comment"># Add to the Graph the Ops that calculate and apply gradients.</span></div><div class="line">    train_op = mnist.training(loss, FLAGS.learning_rate)</div><div class="line"></div><div class="line">    <span class="comment"># Add the Op to compare the logits to the labels during evaluation.</span></div><div class="line">    eval_correct = mnist.evaluation(logits, labels_placeholder)</div><div class="line"></div><div class="line">    <span class="comment"># Build the summary Tensor based on the TF collection of Summaries.</span></div><div class="line">    summary = tf.summary.merge_all()</div><div class="line"></div><div class="line">    <span class="comment"># Add the variable initializer Op.</span></div><div class="line">    init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">    <span class="comment"># Create a saver for writing training checkpoints.</span></div><div class="line">    saver = tf.train.Saver()</div><div class="line"></div><div class="line">    <span class="comment"># Create a session for running Ops on the Graph.</span></div><div class="line">    sess = tf.Session()</div><div class="line"></div><div class="line">    <span class="comment"># Instantiate a SummaryWriter to output summaries and the Graph.</span></div><div class="line">    summary_writer = tf.summary.FileWriter(FLAGS.log_dir, sess.graph)</div><div class="line"></div><div class="line">    <span class="comment"># And then after everything is built:</span></div><div class="line"></div><div class="line">    <span class="comment"># Run the Op to initialize the variables.</span></div><div class="line">    sess.run(init)</div><div class="line"></div><div class="line">    <span class="comment"># Start the training loop.</span></div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> xrange(FLAGS.max_steps):</div><div class="line">      start_time = time.time()</div><div class="line"></div><div class="line">      <span class="comment"># Fill a feed dictionary with the actual set of images and labels</span></div><div class="line">      <span class="comment"># for this particular training step.</span></div><div class="line">      feed_dict = fill_feed_dict(data_sets.train, images_placeholder, labels_placeholder)</div><div class="line">      </div><div class="line">      _, loss_value = sess.run([train_op, loss], feed_dict=feed_dict)</div><div class="line"></div><div class="line">      duration = time.time() - start_time</div><div class="line"></div><div class="line">      <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">        <span class="comment"># Print status to stdout.</span></div><div class="line">        print(<span class="string">'Step %d: loss = %.2f (%.3f sec)'</span> % (step, loss_value, duration))</div><div class="line">        <span class="comment"># Update the events file.</span></div><div class="line">        summary_str = sess.run(summary, feed_dict=feed_dict)</div><div class="line">        summary_writer.add_summary(summary_str, step)</div><div class="line">        summary_writer.flush()</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (step + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span> <span class="keyword">or</span> (step + <span class="number">1</span>) == FLAGS.max_steps:</div><div class="line">        checkpoint_file = os.path.join(FLAGS.log_dir, <span class="string">'model.ckpt'</span>)</div><div class="line">        saver.save(sess, checkpoint_file, global_step=step)</div><div class="line">        <span class="comment"># Evaluate against the training set.</span></div><div class="line">        print(<span class="string">'Training Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.train)</div><div class="line">        <span class="comment"># Evaluate against the validation set.</span></div><div class="line">        print(<span class="string">'Validation Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.validation)</div><div class="line">        <span class="comment"># Evaluate against the test set.</span></div><div class="line">        print(<span class="string">'Test Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.test)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></div><div class="line">  <span class="comment"># 把之前的 log 文件删除</span></div><div class="line">  <span class="keyword">if</span> tf.gfile.Exists(FLAGS.log_dir):</div><div class="line">    tf.gfile.DeleteRecursively(FLAGS.log_dir)</div><div class="line">  <span class="comment"># 重新创建 log 文件</span></div><div class="line">  tf.gfile.MakeDirs(FLAGS.log_dir)</div><div class="line">  <span class="comment"># 正式开始训练</span></div><div class="line">  run_training()</div></pre></td></tr></table></figure>
<p>Python 中的 argparse 模块主要负责命令行解析。其主要作用是在 python 调用 .py 脚本文件是可以传入参数。比如对于以下程序，我们可以在命令行输入 <code>$ python fully_connected_feed.py --learning_rate 0.1 --max_steps 200</code>。其中 ArgumentParser() 函数的作用是定义一个 parser 实例。parser.add_argument() 函数的作用是添加输入命令参数，它的第一个参数为命令参数名称，第二个参数为命令参数类型，第三个参数为命令参数默认值，如果没有输入，那么取默认值，第四个参数为调用 help 时显示的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if 的作用是保证此文件被 import 时，不会执行 main 里面的内容</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </div><div class="line">  parser = argparse.ArgumentParser()</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--learning_rate'</span>,</div><div class="line">      type=float,</div><div class="line">      default=<span class="number">0.01</span>,</div><div class="line">      help=<span class="string">'Initial learning rate.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--max_steps'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">2000</span>,</div><div class="line">      help=<span class="string">'Number of steps to run trainer.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--hidden1'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">128</span>,</div><div class="line">      help=<span class="string">'Number of units in hidden layer 1.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--hidden2'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">32</span>,</div><div class="line">      help=<span class="string">'Number of units in hidden layer 2.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--batch_size'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">100</span>,</div><div class="line">      help=<span class="string">'Batch size.  Must divide evenly into the dataset sizes.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--input_data_dir'</span>,</div><div class="line">      type=str,</div><div class="line">      default=os.path.join(os.getenv(<span class="string">'TEST_TMPDIR'</span>, <span class="string">'/tmp'</span>),</div><div class="line">                           <span class="string">'tensorflow/mnist/input_data'</span>),</div><div class="line">      help=<span class="string">'Directory to put the input data.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--log_dir'</span>,</div><div class="line">      type=str,</div><div class="line">      default=os.path.join(os.getenv(<span class="string">'TEST_TMPDIR'</span>, <span class="string">'/tmp'</span>),</div><div class="line">                           <span class="string">'tensorflow/mnist/logs/fully_connected_feed'</span>),</div><div class="line">      help=<span class="string">'Directory to put the log data.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--fake_data'</span>,</div><div class="line">      default=<span class="keyword">False</span>,</div><div class="line">      help=<span class="string">'If true, uses fake data for unit testing.'</span>,</div><div class="line">      action=<span class="string">'store_true'</span></div><div class="line">  )</div><div class="line">  </div><div class="line">  <span class="comment"># parse_known_args() 函数的作用是把传入的参数读出来，并放到 FLAGS 里面，unparsed 里面存的是默认值。</span></div><div class="line">  FLAGS, unparsed = parser.parse_known_args() </div><div class="line">  <span class="comment"># 正式激活 main() 函数。</span></div><div class="line">  tf.app.run(main=main, argv=[sys.argv[<span class="number">0</span>]] + unparsed)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在一台设备上管理两个 Github 账号]]></title>
      <url>/2017/09/17/manage-two-github-accounts-in-one-computer/</url>
      <content type="html"><![CDATA[<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><p><a href="http://www.jianshu.com/p/f2bef9737a8a" target="_blank" rel="external">简书</a></p>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何利用 Hexo 在 Github 上搭建个人博客]]></title>
      <url>/2017/09/13/how-to-create-blog-by-hexo/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是一种基于 node.js 的静态博客框架。</p>
<a id="more"></a>
<h2 id="安装-node-js-和-hexo"><a href="#安装-node-js-和-hexo" class="headerlink" title="安装 node.js 和 hexo"></a>安装 node.js 和 hexo</h2><p>首先到<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官网</a>下载安装 node.js, windows 版本是一个 msi 文件，直接下载双击安装就行。安装程序会自动添加环境变量，此时需要重启才能生效。</p>
<p>接下来的操作大多数基于命令行，windows 系统下可以使用 git bash（git 安装与使用方法这里暂不详述）, 其操作与 linux 类似，个人感觉比 cmd 好用。</p>
<p>接下来通过下面命令安装 hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>其中 npm 是 node.js 的包管理工具，类似于 ruby 的 gem, python 的 pip, Ubuntu 的 apt-get。接下来，到到你想存放博客文件的目录，执行下面命令新建一个博客：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>上面命令中的 blog 可以任意取名，用于存放博客文件，然后 cd 进去 blog 文件。接下来执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>npm install 是 npm 的安装命令，会自动在blog目录下寻找 package.json 作为配置文件安装必要的模块。此时就可以在本地通过以下命令启动hexo服务器了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>启动本地服务器后，便可以通过 <a href="http://localhost:4000/" target="_blank" rel="external">localhost:4000</a> 来访问自己本地的 hexo 博客了。需要注意的是，这个时候打开的这个 git bash 已经被占用了，不能关闭，否则 hexo 服务器也就关闭了。如果要执行其他命令，需要打开一个新的 git bash。</p>
<h2 id="把-hexo-部署到-github-上"><a href="#把-hexo-部署到-github-上" class="headerlink" title="把 hexo 部署到 github 上"></a>把 hexo 部署到 github 上</h2><p>接下来就可以把本地的 hexo 博客部署到 github 上了。</p>
<p>首先，我们需要在 github 上新建一个 repo, repo 的名字为 yourname.github.io，其中 yourname 为你自己的 github 的名字。</p>
<p>在正式部署之前，需要做好以下三项准备：</p>
<ul>
<li>安装 git 部署工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>blog 文件夹里面的 _config.yml 文件的 deploy 部分需要做以下配置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>设置本地 git bash 与你 github 账号之间的秘钥。使用一下命令生成 ssh key:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@email.com"</span></div></pre></td></tr></table></figure>
<p>其中 youremail@email.com 是 github bash 的邮箱，cd 到存放秘钥的目录，利用以下命令打印出公钥：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub</div></pre></td></tr></table></figure>
<p>复制打印出来的公钥，粘贴到 GitHub 账号的 setting -&gt; SSH keys。</p>
<p>这个时候就可以通过以下命令一键部署本地 hexo 到 github 上面了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
<p>至此，hexo 就已经部署好了，接下来说一说更好得使用 hexo。</p>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>前面利用 hexo init 建立博客时使用的是默认模板，个人感觉不是很好看，hexo 有着丰富的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题模板</a>，而且切换起来非常方便，只需要在 blog 文件夹下面执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee themes/yelee</div></pre></td></tr></table></figure>
<p>上面的链接为主题模板的 github 地址，下载的主题放在 /blog/themes 文件夹下面。事实上，打开 themes 文件夹我们发现里面已经有一个默认模板 landscape 在里面了。</p>
<p>最后把 blog 文件夹里面的 _config.yml 文件的 theme 字段修改成对应的主题名字就好了。</p>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
<li><a href="http://moxfive.coding.me/yelee/5.Vendor/baidu-share.html" target="_blank" rel="external">Yelee 主题使用说明</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
