<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[如何使用远程计算资源]]></title>
      <url>/2017/10/30/how-to-use-purdue-cluster/</url>
      <content type="html"><![CDATA[<p>在普渡学习期间，为了提高训练模型的速度，获得了使用多个远程计算资源的权限，包括课题组自己搭建的 swarm 服务器，普渡计算中心集群 Conte [1]，以及匹兹堡超算中心（Pittsburgh Supercomputing Center）Bridges 计算集群。下面记录一下使用各个远程计算资源的方法。</p>
<a id="more"></a>
<h2 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h2><h3 id="远程登录主机"><a href="#远程登录主机" class="headerlink" title="远程登录主机"></a>远程登录主机</h3><p>在 macos 或 Linux 中，可以直接使用 ssh 命令登录远程主机，使用方法为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh username_in_remote_host@remote_host</div></pre></td></tr></table></figure>
<p>其中，username_in_remote_host 是自己在远程主机上拥有的用户名，remote_host 是远程主机的 IP 地址或者域名。登录远程主机以后就跟在自己电脑上一样操作了。另外，可以使用下面的 scp 命令在本地主机和远程主机之间传输文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp path_to_local_file username_in_remote_host@remote_host:path_to_remote_file</div></pre></td></tr></table></figure>
<p>值得一提的是，我们可以在本地使用多个 shell 登录远程主机，而且在远程主机上可以使用同样的命令登录另外一台远程主机，比如说课题组还有一台服务器 crater 只能通过内网访问，而我的 mac 只能连无线网，无法接入内网，只能通过 ssh 先连接到可以外网访问的服务器 swarm，然后在 swarm 上再通过 ssh 连接 crater。</p>
<h3 id="ssh-免密登录"><a href="#ssh-免密登录" class="headerlink" title="ssh 免密登录"></a>ssh 免密登录</h3><p>正常情况下，每次在本地使用 ssh 和 scp 的时候，都需要输入一次远程主机的登录密码，非常麻烦。为方便起见，我们可以使用 ssh 秘钥对来进行免密登录。</p>
<p>首先，在本地主机使用<code>ssh-keygen</code>命令产生秘钥对，密钥对默认存放在 ~/.ssh 文件夹中，需要注意的是，在产生秘钥过程中会提示设置密码，我们直接按回车键，表示不设置密码，否则就失去了免密登录的意义了。接下来使用 scp 命令把 ~/.ssh 文件夹中的 id_rsa.pub 文件远程拷贝到远程主机的 ~/.ssh 文件夹（如果没有，可以使用<code>mkdir .ssh</code>命令创建）中，接下来使用下面命令对远程主机中的 id_rsa.pub 进行重命名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mv id_rsa.pub authorized_keys</div></pre></td></tr></table></figure>
<p>这个时候当我们再在本地执行 ssh 命令时，不需要输密码就能进入远程主机了。</p>
<h2 id="Conte"><a href="#Conte" class="headerlink" title="Conte"></a>Conte</h2><p>front end，计算集群</p>
<h3 id="存储空间使用"><a href="#存储空间使用" class="headerlink" title="存储空间使用"></a>存储空间使用</h3><h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><h2 id="Bridges"><a href="#Bridges" class="headerlink" title="Bridges"></a>Bridges</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://www.rcac.purdue.edu/knowledge/conte" target="_blank" rel="external">Conte user guide</a></li>
<li><a href="https://www.psc.edu/bridges/user-guide" target="_blank" rel="external">Bridges user guide</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cluster </tag>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 开发过程中遇到问题总结]]></title>
      <url>/2017/10/25/problem-in-python-development/</url>
      <content type="html"><![CDATA[<p>在 python 开发过程中，经常遇到各种小问题，有的时候一个小问题便需要花大半天甚至数天时间才能解决。为方便今后查找，这篇博客主要记录在 python 开发过程中遇到的各种小问题以及相应的解决方法。<br><a id="more"></a></p>
<h2 id="ipython-重新加载模块"><a href="#ipython-重新加载模块" class="headerlink" title="ipython 重新加载模块"></a>ipython 重新加载模块</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>为了提高加载速度，ipython 运行过程中对所有的 module 只会 import 一次，而在稍微大一些的项目中，往往需要编写多个 module 以方便管理。这样一来，当需要在 submodule 里面修改内容时，主程序并不能及时更新，使用的还是最开始加载的内容。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>最简单的解决方法就是每次修改 submodule 内容以后重启 ipython，但这样做非常麻烦而且有可能丢失数据。下面介绍一种利用 ipython 的 autoreload 扩展 [1]彻底解决该问题的方法：</p>
<p>在 ipython 的配置文件 ~/.ipython/profile_default/ipython_config.py 中添加下面两段内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c.InteractiveShellApp.extensions = [<span class="string">'autoreload'</span>]     </div><div class="line">c.InteractiveShellApp.exec_lines = [<span class="string">'%autoreload 2'</span>]</div></pre></td></tr></table></figure>
<p>如果目前 ~/.ipython/profile_default/ 文件夹中不存在 ipython_config.py，可以在终端中输入以下命令来创建：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipython profile create</div></pre></td></tr></table></figure>
<p>该命令会自动创建 ipython 的配置文件，所有可用的配置都被注释好了，我们要做的就是根据自己的需要打开相应的配置并添加相应的内容就好了。</p>
<h2 id="Theano-和-Lasagne-模块-import-错误"><a href="#Theano-和-Lasagne-模块-import-错误" class="headerlink" title="Theano 和 Lasagne 模块 import 错误"></a>Theano 和 Lasagne 模块 import 错误</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>在 Theano 和 Lasagne 模块 import 过程中报 ImportError 错误。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>利用 pip 安装 theano 和 lasagne 模块的正确版本，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip install theano==0.8.2</div><div class="line">$ pip install lasagne==0.1</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://ipython.org/ipython-doc/3/config/extensions/autoreload.html" target="_blank" rel="external">ipython document</a></p>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 中多版本 Python 开发环境搭建]]></title>
      <url>/2017/10/19/build-python-development-environment-in-mac/</url>
      <content type="html"><![CDATA[<p>由于 Mac 上很多系统软件依赖于其自带的 python 环境，如果直接使用系统自带的 python 环境进行开发，很可能会把该环境搞乱，威胁系统安全，因此在开发的时候我们最好能在独立的环境中进行开发。另外，在 python 开发过程中，经常需要在不同版本之间切换，特别是 2.7 和 3.5，因此需要搭建一个方便 python 版本切换的开发环境。<br><a id="more"></a></p>
<p>下面详细介绍 mac 中多版本 python 开发环境的搭建方法。</p>
<h2 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 homebrew</h2><p>在各个版本的 Linux 系统中，可以使用包管理工具来快速安装各种软件，比如 Ubuntu 的 apt-get，Debian/Kali 的 dpkg，Fedora 的 yum 等。同样，在 Mac 系统中，也有一个比较好用的包管理系统，那就是 homebrew。Mac 系统默认是没有 homebrew 的，需要通过以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>安装完成后就可以通过 brew intall pakage-name 命令来安装各种软件了。在这篇博客中主要用来安装下面的 pyenv 和 pyenv-virtualenv。</p>
<h2 id="安装-pyenv"><a href="#安装-pyenv" class="headerlink" title="安装 pyenv"></a>安装 pyenv</h2><p>Mac 系统一般自带有 python 2.7，为了方便 python 版本切换，我们可以通过 pyenv 这个软件来进行快速管理。pyenv 可以管理 python2, python3 以及 annaconda, miniconda 在内的各种 python 发行版本，所有版本文件都存放在 ~/.pyenv/versions 文件夹里面。</p>
<p>首先利用下面命令安装 pyenv:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install pyenv</div></pre></td></tr></table></figure>
<p>然后通过以下两条命令把环境变量写入 ~/.bash_profile 中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.bash_profile</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p>接下来通过把 pyenv init 写入 shell 来开启 shims 和自动补齐功能：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> -e <span class="string">'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval "$(pyenv init -)"\nfi'</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p>这个时候就可以通过 pyenv 来管理 python 版本了，下面简单介绍 pyenv 的几条常用命令。</p>
<p>查看本机安装的 python 版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div></pre></td></tr></table></figure>
<p>星号表示当前正在使用的 Python 版本。使用 python -V 确认版本。</p>
<p>查看可安装的 python 版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv install -l</div></pre></td></tr></table></figure>
<p>Python 安装与卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 2.7.3   <span class="comment"># 安装python</span></div><div class="line">$ pyenv uninstall 2.7.3 <span class="comment"># 卸载python</span></div></pre></td></tr></table></figure>
<p>Python 版本切换</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 2.7.3  <span class="comment"># 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。</span></div><div class="line">$ pyenv <span class="built_in">local</span> 2.7.3 <span class="comment"># 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。</span></div><div class="line">$ pyenv shell 2.7.3 <span class="comment"># 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。</span></div><div class="line">$ pyenv shell --<span class="built_in">unset</span> <span class="comment"># 取消当前 shell 设定的版本。</span></div><div class="line">$ pyenv <span class="built_in">rehash</span>  <span class="comment"># 创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/*/bin/*，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）</span></div></pre></td></tr></table></figure>
<p>python 的使用优先级为 shell &gt; local &gt; global。</p>
<h2 id="安装-pyenv-virtualenv"><a href="#安装-pyenv-virtualenv" class="headerlink" title="安装 pyenv-virtualenv"></a>安装 pyenv-virtualenv</h2><p>pyenv-virtual 是用来管理虚拟环境的。这里我们需要认真区分版本管理和环境管理的区别，版本管理用于管理 python 的不同发行版本，而环境管理用于为不同项目定制开发环境。在 pyenv 中，环境是从版本中派生出来的，可以继承所属版本的第三方包，也可以为特定项目定制第三方包，而又不至于影响原始的 python 版本。对于 pyenv 来说，虚拟环境和版本一样，也存放在 ~/.pyenv/versions 文件夹中，其管理跟版本管理类似，可以使用 uninstall, global, local 等命令。</p>
<p>我们同样使用 homebrew 来安装 pyenv-virtualenv：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pyenv-virtualenv</div></pre></td></tr></table></figure>
<p>之后，我们就可以通过以下命令来创建虚拟环境了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv virtualenv &lt;python-version&gt; &lt;virtualenv-name&gt;</div></pre></td></tr></table></figure>
<p>其中，python-version 是虚拟环境的版本类型，virtualenv-name 为该虚拟环境的名字，可以自己任取。</p>
<p>接下来就可以通过下面命令激活和关闭虚拟环境了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv activate virtualenv-name</div><div class="line">pyenv deactivate</div></pre></td></tr></table></figure>
<p>激活后 shell 的最前端会出现，(virtualenv-name)，代表已经进入虚拟环境。</p>
<p>如果我们想每次进入某个项目便自动激活特定虚拟环境，可以通过 local 命令来设置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv <span class="built_in">local</span> virtualenv-name</div></pre></td></tr></table></figure>
<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><p>pip 是 python 的包安装工具，安装 pip 后，所有的 python 包都可以通过 pip isntall pkg 进行安装。首先通过下面命令获取 pip 安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://bootstrap.pypa.io/get-pip.py</div></pre></td></tr></table></figure>
<p>wget 是一个好用的文件下载工具，下载的文件放在当前文件夹中。如果还没有安装 wget，也可以通过 homebrew 进行安装。</p>
<p>接下来就可以用 python 执行该安装脚本了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo python get-pip.py</div></pre></td></tr></table></figure>
<p>需要注意的是，由于我们使用了 pyenv 来管理 python 版本，每次使用 pip 都是把相应的包安装到当前系统使用的 python 版本中。如果我们在虚拟环境中，那么相应的包便安装到相应的虚拟环境中了。</p>
<h2 id="Python-开发常用软件"><a href="#Python-开发常用软件" class="headerlink" title="Python 开发常用软件"></a>Python 开发常用软件</h2><p>在 python 开发过程中，使用一些软件能大大加快开发进程，这些软件都可以通过 pip 进行安装。</p>
<ul>
<li>ipython</li>
</ul>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">homebrew 官网</a></li>
<li><a href="http://www.jb51.net/article/76931.htm" target="_blank" rel="external">在Mac OS上搭建Python的开发环境</a></li>
<li><a href="http://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="external">使用 pyenv 管理 Python 版本</a></li>
<li><a href="https://github.com/pyenv/pyenv#homebrew-on-mac-os-x" target="_blank" rel="external">Pyenv github</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入剖析 mnist_tutorial_pure_tf.py]]></title>
      <url>/2017/09/22/understanding-mnist-tutorial-pure-tf/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>mnist_tutorial_p ure_tf.py 是对抗机器学习库 cleverhans 的经典例程，我们可以通过学习这个例程来对 cleverhans 进行更加深入的了解。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.python.platform <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> tensorflow.python.platform <span class="keyword">import</span> flags</div><div class="line"></div><div class="line"><span class="keyword">from</span> cleverhans.utils_mnist <span class="keyword">import</span> data_mnist</div><div class="line"><span class="keyword">from</span> cleverhans.utils_tf <span class="keyword">import</span> model_train, model_eval</div><div class="line"><span class="keyword">from</span> cleverhans.attacks <span class="keyword">import</span> FastGradientMethod</div><div class="line"><span class="keyword">from</span> cleverhans.utils <span class="keyword">import</span> AccuracyReport</div><div class="line"></div><div class="line">FLAGS = flags.FLAGS</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line"><span class="string">  An example of a bare bones multilayer perceptron (MLP) class.</span></div><div class="line"><span class="string">  """</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layers, input_shape)</span>:</span></div><div class="line">    self.layers = layers</div><div class="line">    self.input_shape = input_shape</div><div class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</div><div class="line">      layer.set_input_shape(input_shape)</div><div class="line">      input_shape = layer.get_output_shape()</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x, return_all=False, set_ref=False)</span>:</span></div><div class="line">    states = []</div><div class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</div><div class="line">      <span class="keyword">if</span> set_ref:</div><div class="line">        layer.ref = x</div><div class="line">      x = layer.fprop(x)</div><div class="line">      <span class="keyword">assert</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></div><div class="line">      states.append(x)</div><div class="line">    <span class="keyword">if</span> return_all:</div><div class="line">      <span class="keyword">return</span> states</div><div class="line">    <span class="keyword">return</span> x</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.fprop(x)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layer</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_output_shape</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.output_shape</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span><span class="params">(Layer)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_hid)</span>:</span></div><div class="line">    self.num_hid = num_hid</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_input_shape</span><span class="params">(self, input_shape)</span>:</span></div><div class="line">    batch_size, dim = input_shape</div><div class="line">    self.input_shape = [batch_size, dim]</div><div class="line">    self.output_shape = [batch_size, self.num_hid]</div><div class="line">    init = tf.random_normal([dim, self.num_hid], dtype=tf.float32)</div><div class="line">    init = init / tf.sqrt(<span class="number">1e-7</span> + tf.reduce_sum(tf.square(init), axis=<span class="number">0</span>,</div><div class="line">                                               keep_dims=<span class="keyword">True</span>))</div><div class="line">    self.W = tf.Variable(init)</div><div class="line">    self.b = tf.Variable(np.zeros((self.num_hid,)).astype(<span class="string">'float32'</span>))</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> tf.matmul(x, self.W) + self.b</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conv2D</span><span class="params">(Layer)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, output_channels, kernel_shape, strides, padding)</span>:</span></div><div class="line">    self.__dict__.update(locals())</div><div class="line">    <span class="keyword">del</span> self.self</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_input_shape</span><span class="params">(self, input_shape)</span>:</span></div><div class="line">    batch_size, rows, cols, input_channels = input_shape</div><div class="line">    kernel_shape = tuple(self.kernel_shape) + (input_channels,</div><div class="line">                                               self.output_channels)</div><div class="line">    <span class="keyword">assert</span> len(kernel_shape) == <span class="number">4</span></div><div class="line">    <span class="keyword">assert</span> all(isinstance(e, int) <span class="keyword">for</span> e <span class="keyword">in</span> kernel_shape), kernel_shape</div><div class="line">    init = tf.random_normal(kernel_shape, dtype=tf.float32)</div><div class="line">    init = init / tf.sqrt(<span class="number">1e-7</span> + tf.reduce_sum(tf.square(init),</div><div class="line">                                               axis=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)))</div><div class="line">    self.kernels = tf.Variable(init)</div><div class="line">    self.b = tf.Variable(np.zeros((self.output_channels,)).astype(<span class="string">'float32'</span>))</div><div class="line">    orig_input_batch_size = input_shape[<span class="number">0</span>]</div><div class="line">    input_shape = list(input_shape)</div><div class="line">    input_shape[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">    dummy_batch = tf.zeros(input_shape)</div><div class="line">    dummy_output = self.fprop(dummy_batch)</div><div class="line">    output_shape = [int(e) <span class="keyword">for</span> e <span class="keyword">in</span> dummy_output.get_shape()]</div><div class="line">    output_shape[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">    self.output_shape = tuple(output_shape)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, self.kernels,</div><div class="line">                        (<span class="number">1</span>,) + tuple(self.strides) + (<span class="number">1</span>,), self.padding)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReLU</span><span class="params">(Layer)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_input_shape</span><span class="params">(self, shape)</span>:</span></div><div class="line">    self.input_shape = shape</div><div class="line">    self.output_shape = shape</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_output_shape</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.output_shape</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> tf.nn.relu(x)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Softmax</span><span class="params">(Layer)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_input_shape</span><span class="params">(self, shape)</span>:</span></div><div class="line">    self.input_shape = shape</div><div class="line">    self.output_shape = shape</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> tf.nn.softmax(x)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flatten</span><span class="params">(Layer)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_input_shape</span><span class="params">(self, shape)</span>:</span></div><div class="line">    self.input_shape = shape</div><div class="line">    output_width = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> shape[<span class="number">1</span>:]:</div><div class="line">      output_width *= factor</div><div class="line">    self.output_width = output_width</div><div class="line">    self.output_shape = [<span class="keyword">None</span>, output_width]</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fprop</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="keyword">return</span> tf.reshape(x, [<span class="number">-1</span>, self.output_width])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_basic_cnn</span><span class="params">(nb_filters=<span class="number">64</span>, nb_classes=<span class="number">10</span>,</span></span></div><div class="line"><span class="function"><span class="params">                   input_shape=<span class="params">(None, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span>)</span>:</span></div><div class="line">  layers = [Conv2D(nb_filters, (<span class="number">8</span>, <span class="number">8</span>), (<span class="number">2</span>, <span class="number">2</span>), <span class="string">"SAME"</span>),</div><div class="line">            ReLU(),</div><div class="line">            Conv2D(nb_filters * <span class="number">2</span>, (<span class="number">6</span>, <span class="number">6</span>), (<span class="number">2</span>, <span class="number">2</span>), <span class="string">"VALID"</span>),</div><div class="line">            ReLU(),</div><div class="line">            Conv2D(nb_filters * <span class="number">2</span>, (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">1</span>), <span class="string">"VALID"</span>),</div><div class="line">            ReLU(),</div><div class="line">            Flatten(),</div><div class="line">            Linear(nb_classes),</div><div class="line">            Softmax()]</div><div class="line"></div><div class="line">  model = MLP(layers, input_shape)</div><div class="line">  <span class="keyword">return</span> model</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_tutorial</span><span class="params">(train_start=<span class="number">0</span>, train_end=<span class="number">60000</span>, test_start=<span class="number">0</span>,</span></span></div><div class="line"><span class="function"><span class="params">                   test_end=<span class="number">10000</span>, nb_epochs=<span class="number">6</span>, batch_size=<span class="number">128</span>,</span></span></div><div class="line"><span class="function"><span class="params">                   learning_rate=<span class="number">0.001</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    MNIST cleverhans tutorial</span></div><div class="line"><span class="string">    :param train_start: index of first training set example</span></div><div class="line"><span class="string">    :param train_end: index of last training set example</span></div><div class="line"><span class="string">    :param test_start: index of first test set example</span></div><div class="line"><span class="string">    :param test_end: index of last test set example</span></div><div class="line"><span class="string">    :param nb_epochs: number of epochs to train model</span></div><div class="line"><span class="string">    :param batch_size: size of training batches</span></div><div class="line"><span class="string">    :param learning_rate: learning rate for training</span></div><div class="line"><span class="string">    :return: an AccuracyReport object</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    <span class="comment"># Object used to keep track of (and return) key accuracies</span></div><div class="line">    report = AccuracyReport()</div><div class="line"></div><div class="line">    <span class="comment"># Set TF random seed to improve reproducibility</span></div><div class="line">    tf.set_random_seed(<span class="number">1234</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Create TF session</span></div><div class="line">    sess = tf.Session()</div><div class="line"></div><div class="line">    <span class="comment"># Get MNIST test data</span></div><div class="line">    X_train, Y_train, X_test, Y_test = data_mnist(train_start=train_start,</div><div class="line">                                                  train_end=train_end,</div><div class="line">                                                  test_start=test_start,</div><div class="line">                                                  test_end=test_end)</div><div class="line"></div><div class="line">    <span class="comment"># Use label smoothing</span></div><div class="line">    <span class="keyword">assert</span> Y_train.shape[<span class="number">1</span>] == <span class="number">10.</span></div><div class="line">    label_smooth = <span class="number">.1</span></div><div class="line">    Y_train = Y_train.clip(label_smooth / <span class="number">9.</span>, <span class="number">1.</span> - label_smooth)</div><div class="line"></div><div class="line">    <span class="comment"># Define input TF placeholder</span></div><div class="line">    x = tf.placeholder(tf.float32, shape=(<span class="keyword">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))</div><div class="line">    y = tf.placeholder(tf.float32, shape=(<span class="keyword">None</span>, <span class="number">10</span>))</div><div class="line"></div><div class="line">    <span class="comment"># Define TF model graph</span></div><div class="line">    model = make_basic_cnn()</div><div class="line">    preds = model.fprop(x)</div><div class="line">    print(<span class="string">"Defined TensorFlow model graph."</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># Evaluate the accuracy of the MNIST model on legitimate test examples</span></div><div class="line">        eval_params = &#123;<span class="string">'batch_size'</span>: batch_size&#125;</div><div class="line">        acc = model_eval(sess, x, y, preds, X_test, Y_test, args=eval_params)</div><div class="line">        report.clean_train_clean_eval = acc</div><div class="line">        <span class="keyword">assert</span> X_test.shape[<span class="number">0</span>] == test_end - test_start, X_test.shape</div><div class="line">        print(<span class="string">'Test accuracy on legitimate examples: %0.4f'</span> % acc)</div><div class="line"></div><div class="line">    <span class="comment"># Train an MNIST model</span></div><div class="line">    train_params = &#123;</div><div class="line">        <span class="string">'nb_epochs'</span>: nb_epochs,</div><div class="line">        <span class="string">'batch_size'</span>: batch_size,</div><div class="line">        <span class="string">'learning_rate'</span>: learning_rate</div><div class="line">    &#125;</div><div class="line">    model_train(sess, x, y, preds, X_train, Y_train, evaluate=evaluate,</div><div class="line">                args=train_params)</div><div class="line"></div><div class="line">    <span class="comment"># Initialize the Fast Gradient Sign Method (FGSM) attack object and graph</span></div><div class="line">    fgsm = FastGradientMethod(model, sess=sess)</div><div class="line">    fgsm_params = &#123;<span class="string">'eps'</span>: <span class="number">0.3</span>&#125;</div><div class="line">    adv_x = fgsm.generate(x, **fgsm_params)</div><div class="line">    preds_adv = model.fprop(adv_x)</div><div class="line"></div><div class="line">    <span class="comment"># Evaluate the accuracy of the MNIST model on adversarial examples</span></div><div class="line">    eval_par = &#123;<span class="string">'batch_size'</span>: batch_size&#125;</div><div class="line">    acc = model_eval(sess, x, y, preds_adv, X_test, Y_test, args=eval_par)</div><div class="line">    print(<span class="string">'Test accuracy on adversarial examples: %0.4f\n'</span> % acc)</div><div class="line">    report.clean_train_adv_eval = acc</div><div class="line"></div><div class="line">    print(<span class="string">"Repeating the process, using adversarial training"</span>)</div><div class="line">    <span class="comment"># Redefine TF model graph</span></div><div class="line">    model_2 = make_basic_cnn()</div><div class="line">    preds_2 = model_2(x)</div><div class="line">    fgsm2 = FastGradientMethod(model_2, sess=sess)</div><div class="line">    preds_2_adv = model_2(fgsm2.generate(x, **fgsm_params))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate_2</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># Accuracy of adversarially trained model on legitimate test inputs</span></div><div class="line">        eval_params = &#123;<span class="string">'batch_size'</span>: batch_size&#125;</div><div class="line">        accuracy = model_eval(sess, x, y, preds_2, X_test, Y_test,</div><div class="line">                              args=eval_params)</div><div class="line">        print(<span class="string">'Test accuracy on legitimate examples: %0.4f'</span> % accuracy)</div><div class="line">        report.adv_train_clean_eval = accuracy</div><div class="line"></div><div class="line">        <span class="comment"># Accuracy of the adversarially trained model on adversarial examples</span></div><div class="line">        accuracy = model_eval(sess, x, y, preds_2_adv, X_test,</div><div class="line">                              Y_test, args=eval_params)</div><div class="line">        print(<span class="string">'Test accuracy on adversarial examples: %0.4f'</span> % accuracy)</div><div class="line">        report.adv_train_adv_eval = accuracy</div><div class="line"></div><div class="line">    <span class="comment"># Perform and evaluate adversarial training</span></div><div class="line">    model_train(sess, x, y, preds_2, X_train, Y_train,</div><div class="line">                predictions_adv=preds_2_adv, evaluate=evaluate_2,</div><div class="line">                args=train_params)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> report</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></div><div class="line">    mnist_tutorial(nb_epochs=FLAGS.nb_epochs, batch_size=FLAGS.batch_size,</div><div class="line">                   learning_rate=FLAGS.learning_rate)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    flags.DEFINE_integer(<span class="string">'nb_epochs'</span>, <span class="number">6</span>, <span class="string">'Number of epochs to train model'</span>)</div><div class="line">    flags.DEFINE_integer(<span class="string">'batch_size'</span>, <span class="number">128</span>, <span class="string">'Size of training batches'</span>)</div><div class="line">    flags.DEFINE_float(<span class="string">'learning_rate'</span>, <span class="number">0.001</span>, <span class="string">'Learning rate for training'</span>)</div><div class="line"></div><div class="line">    app.run()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> security </tag>
            
            <tag> cleverhans </tag>
            
            <tag> adversarial </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 使用方法与常用命令]]></title>
      <url>/2017/09/21/commands-of-git/</url>
      <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>克隆项目到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/folder-of-project folder-to-save</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入剖析 fully_connected_feed.py]]></title>
      <url>/2017/09/21/understanding-fully-connected-feed/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fully_connected_feed.py 是 tensorflow 中训练 MINIST 数据集的简单示例，通过对该代码的学习，可以帮助我们更好得理解 python 的语法以及 tensorflow 的工作流程。</p>
<a id="more"></a>
<h2 id="代码详细注释"><a href="#代码详细注释" class="headerlink" title="代码详细注释"></a>代码详细注释</h2><p>由于Python是由社区推动的开源并且免费的开发语言，不受商业公司控制，因此，Python的改进往往比较激进，不兼容的情况时有发生。Python为了确保你能顺利过渡到新版本，特别提供了<strong>future</strong>模块，让你在旧的版本中试验新版本的一些特性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pylint: disable=missing-docstring</span></div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> mnist</div><div class="line"></div><div class="line"><span class="comment"># Basic model parameters as external flags.</span></div><div class="line">FLAGS = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">placeholder_inputs</span><span class="params">(batch_size)</span>:</span></div><div class="line">  images_placeholder = tf.placeholder(tf.float32, shape=(batch_size,</div><div class="line">                                                         mnist.IMAGE_PIXELS))</div><div class="line">  labels_placeholder = tf.placeholder(tf.int32, shape=(batch_size))</div><div class="line">  <span class="keyword">return</span> images_placeholder, labels_placeholder</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_feed_dict</span><span class="params">(data_set, images_pl, labels_pl)</span>:</span></div><div class="line">  images_feed, labels_feed = data_set.next_batch(FLAGS.batch_size,</div><div class="line">                                                 FLAGS.fake_data)</div><div class="line">  feed_dict = &#123;</div><div class="line">      images_pl: images_feed,</div><div class="line">      labels_pl: labels_feed,</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> feed_dict</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_eval</span><span class="params">(sess,</span></span></div><div class="line"><span class="function"><span class="params">            eval_correct,</span></span></div><div class="line"><span class="function"><span class="params">            images_placeholder,</span></span></div><div class="line"><span class="function"><span class="params">            labels_placeholder,</span></span></div><div class="line"><span class="function"><span class="params">            data_set)</span>:</span></div><div class="line">  true_count = <span class="number">0</span>  <span class="comment"># Counts the number of correct predictions.</span></div><div class="line">  steps_per_epoch = data_set.num_examples // FLAGS.batch_size</div><div class="line">  num_examples = steps_per_epoch * FLAGS.batch_size</div><div class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> xrange(steps_per_epoch):</div><div class="line">    feed_dict = fill_feed_dict(data_set,</div><div class="line">                               images_placeholder,</div><div class="line">                               labels_placeholder)</div><div class="line">    true_count += sess.run(eval_correct, feed_dict=feed_dict)</div><div class="line">  precision = float(true_count) / num_examples</div><div class="line">  print(<span class="string">'  Num examples: %d  Num correct: %d  Precision @ 1: %0.04f'</span> %</div><div class="line">        (num_examples, true_count, precision))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_training</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">with</span> tf.Graph().as_default():</div><div class="line">    <span class="comment"># Generate placeholders for the images and labels.</span></div><div class="line">    images_placeholder, labels_placeholder = placeholder_inputs(</div><div class="line">        FLAGS.batch_size)</div><div class="line"></div><div class="line">    <span class="comment"># Build a Graph that computes predictions from the inference model.</span></div><div class="line">    logits = mnist.inference(images_placeholder, FLAGS.hidden1, FLAGS.hidden2)</div><div class="line"></div><div class="line">    <span class="comment"># Add to the Graph the Ops for loss calculation.</span></div><div class="line">    loss = mnist.loss(logits, labels_placeholder)</div><div class="line"></div><div class="line">    <span class="comment"># Add to the Graph the Ops that calculate and apply gradients.</span></div><div class="line">    train_op = mnist.training(loss, FLAGS.learning_rate)</div><div class="line"></div><div class="line">    <span class="comment"># Add the Op to compare the logits to the labels during evaluation.</span></div><div class="line">    eval_correct = mnist.evaluation(logits, labels_placeholder)</div><div class="line"></div><div class="line">    <span class="comment"># Build the summary Tensor based on the TF collection of Summaries.</span></div><div class="line">    summary = tf.summary.merge_all()</div><div class="line"></div><div class="line">    <span class="comment"># Add the variable initializer Op.</span></div><div class="line">    init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">    <span class="comment"># Create a saver for writing training checkpoints.</span></div><div class="line">    saver = tf.train.Saver()</div><div class="line"></div><div class="line">    <span class="comment"># Create a session for running Ops on the Graph.</span></div><div class="line">    sess = tf.Session()</div><div class="line"></div><div class="line">    <span class="comment"># Instantiate a SummaryWriter to output summaries and the Graph.</span></div><div class="line">    summary_writer = tf.summary.FileWriter(FLAGS.log_dir, sess.graph)</div><div class="line"></div><div class="line">    <span class="comment"># And then after everything is built:</span></div><div class="line"></div><div class="line">    <span class="comment"># Run the Op to initialize the variables.</span></div><div class="line">    sess.run(init)</div><div class="line"></div><div class="line">    <span class="comment"># Start the training loop.</span></div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> xrange(FLAGS.max_steps):</div><div class="line">      start_time = time.time()</div><div class="line"></div><div class="line">      <span class="comment"># Fill a feed dictionary with the actual set of images and labels</span></div><div class="line">      <span class="comment"># for this particular training step.</span></div><div class="line">      feed_dict = fill_feed_dict(data_sets.train, images_placeholder, labels_placeholder)</div><div class="line">      </div><div class="line">      _, loss_value = sess.run([train_op, loss], feed_dict=feed_dict)</div><div class="line"></div><div class="line">      duration = time.time() - start_time</div><div class="line"></div><div class="line">      <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">        <span class="comment"># Print status to stdout.</span></div><div class="line">        print(<span class="string">'Step %d: loss = %.2f (%.3f sec)'</span> % (step, loss_value, duration))</div><div class="line">        <span class="comment"># Update the events file.</span></div><div class="line">        summary_str = sess.run(summary, feed_dict=feed_dict)</div><div class="line">        summary_writer.add_summary(summary_str, step)</div><div class="line">        summary_writer.flush()</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (step + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span> <span class="keyword">or</span> (step + <span class="number">1</span>) == FLAGS.max_steps:</div><div class="line">        checkpoint_file = os.path.join(FLAGS.log_dir, <span class="string">'model.ckpt'</span>)</div><div class="line">        saver.save(sess, checkpoint_file, global_step=step)</div><div class="line">        <span class="comment"># Evaluate against the training set.</span></div><div class="line">        print(<span class="string">'Training Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.train)</div><div class="line">        <span class="comment"># Evaluate against the validation set.</span></div><div class="line">        print(<span class="string">'Validation Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.validation)</div><div class="line">        <span class="comment"># Evaluate against the test set.</span></div><div class="line">        print(<span class="string">'Test Data Eval:'</span>)</div><div class="line">        do_eval(sess, eval_correct, images_placeholder, labels_placeholder, data_sets.test)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></div><div class="line">  <span class="comment"># 把之前的 log 文件删除</span></div><div class="line">  <span class="keyword">if</span> tf.gfile.Exists(FLAGS.log_dir):</div><div class="line">    tf.gfile.DeleteRecursively(FLAGS.log_dir)</div><div class="line">  <span class="comment"># 重新创建 log 文件</span></div><div class="line">  tf.gfile.MakeDirs(FLAGS.log_dir)</div><div class="line">  <span class="comment"># 正式开始训练</span></div><div class="line">  run_training()</div></pre></td></tr></table></figure>
<p>Python 中的 argparse 模块主要负责命令行解析。其主要作用是在 python 调用 .py 脚本文件是可以传入参数。比如对于以下程序，我们可以在命令行输入 <code>$ python fully_connected_feed.py --learning_rate 0.1 --max_steps 200</code>。其中 ArgumentParser() 函数的作用是定义一个 parser 实例。parser.add_argument() 函数的作用是添加输入命令参数，它的第一个参数为命令参数名称，第二个参数为命令参数类型，第三个参数为命令参数默认值，如果没有输入，那么取默认值，第四个参数为调用 help 时显示的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if 的作用是保证此文件被 import 时，不会执行 main 里面的内容</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </div><div class="line">  parser = argparse.ArgumentParser()</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--learning_rate'</span>,</div><div class="line">      type=float,</div><div class="line">      default=<span class="number">0.01</span>,</div><div class="line">      help=<span class="string">'Initial learning rate.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--max_steps'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">2000</span>,</div><div class="line">      help=<span class="string">'Number of steps to run trainer.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--hidden1'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">128</span>,</div><div class="line">      help=<span class="string">'Number of units in hidden layer 1.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--hidden2'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">32</span>,</div><div class="line">      help=<span class="string">'Number of units in hidden layer 2.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--batch_size'</span>,</div><div class="line">      type=int,</div><div class="line">      default=<span class="number">100</span>,</div><div class="line">      help=<span class="string">'Batch size.  Must divide evenly into the dataset sizes.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--input_data_dir'</span>,</div><div class="line">      type=str,</div><div class="line">      default=os.path.join(os.getenv(<span class="string">'TEST_TMPDIR'</span>, <span class="string">'/tmp'</span>),</div><div class="line">                           <span class="string">'tensorflow/mnist/input_data'</span>),</div><div class="line">      help=<span class="string">'Directory to put the input data.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--log_dir'</span>,</div><div class="line">      type=str,</div><div class="line">      default=os.path.join(os.getenv(<span class="string">'TEST_TMPDIR'</span>, <span class="string">'/tmp'</span>),</div><div class="line">                           <span class="string">'tensorflow/mnist/logs/fully_connected_feed'</span>),</div><div class="line">      help=<span class="string">'Directory to put the log data.'</span></div><div class="line">  )</div><div class="line">  parser.add_argument(</div><div class="line">      <span class="string">'--fake_data'</span>,</div><div class="line">      default=<span class="keyword">False</span>,</div><div class="line">      help=<span class="string">'If true, uses fake data for unit testing.'</span>,</div><div class="line">      action=<span class="string">'store_true'</span></div><div class="line">  )</div><div class="line">  </div><div class="line">  <span class="comment"># parse_known_args() 函数的作用是把传入的参数读出来，并放到 FLAGS 里面，unparsed 里面存的是默认值。</span></div><div class="line">  FLAGS, unparsed = parser.parse_known_args() </div><div class="line">  <span class="comment"># 正式激活 main() 函数。</span></div><div class="line">  tf.app.run(main=main, argv=[sys.argv[<span class="number">0</span>]] + unparsed)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在一台设备上管理两个 Github 账号]]></title>
      <url>/2017/09/17/manage-two-github-accounts-in-one-computer/</url>
      <content type="html"><![CDATA[<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><p><a href="http://www.jianshu.com/p/f2bef9737a8a" target="_blank" rel="external">简书</a></p>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何利用 Hexo 在 Github 上搭建个人博客]]></title>
      <url>/2017/09/13/how-to-create-blog-by-hexo/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是一种基于 node.js 的静态博客框架。</p>
<a id="more"></a>
<h2 id="安装-node-js-和-hexo"><a href="#安装-node-js-和-hexo" class="headerlink" title="安装 node.js 和 hexo"></a>安装 node.js 和 hexo</h2><p>首先到<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官网</a>下载安装 node.js, windows 版本是一个 msi 文件，直接下载双击安装就行。安装程序会自动添加环境变量，此时需要重启才能生效。</p>
<p>接下来的操作大多数基于命令行，windows 系统下可以使用 git bash（git 安装与使用方法这里暂不详述）, 其操作与 linux 类似，个人感觉比 cmd 好用。</p>
<p>接下来通过下面命令安装 hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>其中 npm 是 node.js 的包管理工具，类似于 ruby 的 gem, python 的 pip, Ubuntu 的 apt-get。接下来，到到你想存放博客文件的目录，执行下面命令新建一个博客：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>上面命令中的 blog 可以任意取名，用于存放博客文件，然后 cd 进去 blog 文件。接下来执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>npm install 是 npm 的安装命令，会自动在blog目录下寻找 package.json 作为配置文件安装必要的模块。此时就可以在本地通过以下命令启动hexo服务器了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>启动本地服务器后，便可以通过 <a href="http://localhost:4000/" target="_blank" rel="external">localhost:4000</a> 来访问自己本地的 hexo 博客了。需要注意的是，这个时候打开的这个 git bash 已经被占用了，不能关闭，否则 hexo 服务器也就关闭了。如果要执行其他命令，需要打开一个新的 git bash。</p>
<h2 id="把-hexo-部署到-github-上"><a href="#把-hexo-部署到-github-上" class="headerlink" title="把 hexo 部署到 github 上"></a>把 hexo 部署到 github 上</h2><p>接下来就可以把本地的 hexo 博客部署到 github 上了。</p>
<p>首先，我们需要在 github 上新建一个 repo, repo 的名字为 yourname.github.io，其中 yourname 为你自己的 github 的名字。</p>
<p>在正式部署之前，需要做好以下三项准备：</p>
<ul>
<li>安装 git 部署工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>blog 文件夹里面的 _config.yml 文件的 deploy 部分需要做以下配置：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>设置本地 git bash 与你 github 账号之间的秘钥。使用一下命令生成 ssh key:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@email.com"</span></div></pre></td></tr></table></figure>
<p>其中 youremail@email.com 是 github bash 的邮箱，cd 到存放秘钥的目录，利用以下命令打印出公钥：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub</div></pre></td></tr></table></figure>
<p>复制打印出来的公钥，粘贴到 GitHub 账号的 setting -&gt; SSH keys。</p>
<p>这个时候就可以通过以下命令一键部署本地 hexo 到 github 上面了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure>
<p>至此，hexo 就已经部署好了，接下来说一说更好得使用 hexo。</p>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>前面利用 hexo init 建立博客时使用的是默认模板，个人感觉不是很好看，hexo 有着丰富的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题模板</a>，而且切换起来非常方便，只需要在 blog 文件夹下面执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee themes/yelee</div></pre></td></tr></table></figure>
<p>上面的链接为主题模板的 github 地址，下载的主题放在 /blog/themes 文件夹下面。事实上，打开 themes 文件夹我们发现里面已经有一个默认模板 landscape 在里面了。</p>
<p>最后把 blog 文件夹里面的 _config.yml 文件的 theme 字段修改成对应的主题名字就好了。</p>
<h2 id="有用链接"><a href="#有用链接" class="headerlink" title="有用链接"></a>有用链接</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
<li><a href="http://moxfive.coding.me/yelee/5.Vendor/baidu-share.html" target="_blank" rel="external">Yelee 主题使用说明</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
